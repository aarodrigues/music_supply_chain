pragma solidity ^0.4.24;
// Define a contract 'MusicSupplyChain'
contract MusicSupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Composed,  // 0
    Arranged,  // 1
    Recorded,  // 2
    Edited,    // 3
    Mixed,     // 4
    Mastered,  // 5
    ForSale,   // 6
    Sold,      // 7
    Shipped,   // 8
    Purchased  // 9
    }

  State constant defaultState = State.Composed;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Composer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originComposerID; // Metamask-Ethereum address of the Composer
    string  originMusicName; // Composer Name
    string  originMusicInformation;  // Composer Information
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address producerID;  // Metamask-Ethereum address of the producer
    address providerID;  // Metamask-Ethereum address of the provider
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Composed(uint upc);
  event Arranged(uint upc);
  event Recorded(uint upc);
  event Edited(uint upc);
  event Mixed(uint upc);
  event Mastered(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Provided(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Composed
  modifier composed(uint _upc) {
    require(items[_upc].itemState == State.Composed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Arranged
  modifier arranged(uint _upc) {
    require(items[_upc].itemState == State.Arranged);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Recorded
  modifier recorded(uint _upc) {
    require(items[_upc].itemState == State.Recorded);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Edited
  modifier edited(uint _upc) {
    require(items[_upc].itemState == State.Edited);
    _;
  }

    // Define a modifier that checks if an item.state of a upc is Edited
  modifier mixed(uint _upc) {
    require(items[_upc].itemState == State.Mixed);
    _;
  }

    // Define a modifier that checks if an item.state of a upc is Edited
  modifier mastered(uint _upc) {
    require(items[_upc].itemState == State.Mastered);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }

    // Define a modifier that checks if an item.state of a upc is Sold
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'composeItem' that allows a farmer to mark an item 'Composed'
  function composeItem(uint _upc, address _originComposerID, string _originMusicName, string  _originMusicLongitude, string  _productNotes) public 
  {
    // Add the new item as part of Harvest
    item[_upc] = Item({upc: _upc, ownerID: owner, originComposerID: _originComposerID, originMusicName: _originMusicName, 
        originMusicInformation: _originMusicInformation, productNotes: _productNotes, 
        itemState: itemState.Composed, producerID: 0, providerID: 0, consumerID: 0 })
    
    // Increment sku
    sku = sku + 1;
    upc = upc + 1;
    // Emit the appropriate event
    emit Composed(_upc);

  }

  // Define a function 'arrangetItem' that allows a farmer to mark an item 'Arranged'
  function arrangeItem(uint _upc) composed(_upc) verifyCaller(item[_upc].ownerID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    item[_upc].itemState = itemState.Arranged;
    
    // Emit the appropriate event
    emit Arranged(_upc);
    
  }

  // Define a function 'record' that allows a farmer to mark an item 'Recorded'
  function record(uint _upc) arranged(_upc) verifyCaller(item[_upc].producerID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    item[_upc].itemState = itemState.Recorded;
    // Emit the appropriate event
    emit Recorded(_upc);
  }


    // Define a function 'record' that allows a farmer to mark an item 'Recorded'
  function edit(uint _upc) recorded(_upc) verifyCaller(item[_upc].producerID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    item[_upc].itemState = itemState.Edited;
    // Emit the appropriate event
    emit Edited(_upc);
  }
  
      // Define a function 'record' that allows a farmer to mark an item 'Recorded'
  function mixing(uint _upc) edited(_upc) verifyCaller(item[_upc].producerID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    item[_upc].itemState = itemState.Mixed;
    // Emit the appropriate event
    emit Mixed(_upc);
  }

      // Define a function 'record' that allows a farmer to mark an item 'Recorded'
  function mastering(uint _upc) mixed(_upc) verifyCaller(item[_upc].producerID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    item[_upc].itemState = itemState.Mastered;
    // Emit the appropriate event
    emit Mastered(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) mastered(_upc) onlyOwner() public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    Item[_upc].itemState = itemState.ForSale;
    Item[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the provider to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) forSale(_upc) paidEnough(msg.value) checkValue(_upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
     Item[_upc].itemState = itemState.Sold;
     Item[_upc].providerID = msg.sender;
     Item[_upc].ownerID = msg.sender;
    // Transfer money to farmer
     Items[_upc].ownerID.transfer(Item[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) sold(_upc) verifyCaller(Item[_upc].providerID) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    Item[_upc].itemState = itemState.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);

  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) shipped(_upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    Item[_upc].itemState = itemState.Purchased;
    Item[_upc].consumerID = msg.sender;
    Item[_upc].ownerID = msg.sender;
    
    // Emit the appropriate event
    emit Purchased(upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originComposerID,
  string  originMusicName,
  string  originMusicInformation,
  string  originMusicLatitude,
  string  originMusicLongitude
  ) 
  {
  // Assign values to the 8 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originComposerID,
  originMusicName,
  originMusicInformation,
  originMusicLatitude,
  originMusicLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
